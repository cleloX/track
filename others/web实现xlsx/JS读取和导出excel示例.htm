<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="UTF-8">
    <title>JS与Excel的交互</title>
    <meta name="description" content="JS与Excel的交互">
    <style type="text/css">
        table {
            text-align: right;

            color: teal;
            border-collapse: collapse;
        }

        th, td {

            border: solid 1px #6D6D6D;
            padding: 5px 10px;
        }

        .mt-sm {

            text-align: center;
            margin-top: 8px;

        }


        body {
            text-align: center;

            background: #f4f4f4;
            padding: 0;
            margin: 0;
        }

        .container {
            text-align: center;

            color: teal;
            font-family: 华光大标宋_CNKI;
            width: 1024px;
            margin: 0 auto;
            background-image: url("pc_bg.jpg");

            padding: 20px;
            min-height: 100vh;
        }

        button {
            background-color: #e0000000; /* Green */
            border: none;
            color: white;
            padding: 25px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            -webkit-transition-duration: 0.4s; /* Safari */
            transition-duration: 0.5s;
        }

        button:hover {
            box-shadow: 0 12px 16px 0 rgba(0, 0, 0, 0.24), 0 17px 50px 0 aqua;
        }

    </style>

</head>
<body>

<div class="container">



    <video controls style="width: 500px;height: 300px;" src="https://sust-group-11.obs.cn-east-3.myhuaweicloud.com/ead7caa0-134e-4045-9544-389328682580.mp4"></video>

    <h1>JS与Excel的交互</h1>
    <h2>读取excel</h2>
    <div class="mt-sm">
        <button type="button">
            <input type="file" id="file" style="display:none;"
                   accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet">
            <a href="javascript:selectFile()">加载本地excel文件 </a>
        </button>
    </div>

    <p>结果输出:</p>
    <div id="result" contenteditable="">
        <table style="margin-left:auto; margin-right:auto;">
            <tbody>
            <tr>
                <th></th>
                <th>A</th>
                <th>B</th>
                <th>C</th>
                <th>D</th>
                <th>E</th>
                <th>F</th>
            </tr>
            <tr>
                <td></td>
                <td>姓名</td>
                <td>性别</td>
                <td>学号</td>
                <td>语文</td>
                <td>数学</td>
                <td>英语</td>

            </tr>
            <tr>
                <td>2</td>
                <td>张三</td>
                <td>男</td>
                <td>01</td>
                <td>89</td>
                <td>87</td>
                <td>90</td>
            </tr>
            <tr>
                <td>3</td>
                <td>李四</td>
                <td>女</td>
                <td>02</td>
                <td>89</td>
                <td>87</td>
                <td>90</td>
            </tr>

            </tbody>
        </table>

    </div>
    <h2>导出excel</h2>
    <button type="button">
        <div class="mt-sm" style="width: auto">
            <input type="button" onclick="exportExcel()" value="保存">
        </div>
    </button>

</div>


<script type="text/javascript" src="jquery-2.2.4.js"></script>
<script type="text/javascript" src="xlsx.full.min.js"></script>
<script type="text/javascript">

    function selectFile() {
        document.getElementById('file').click();
    }

    // 读取本地excel文件
    function readWorkbookFromLocalFile(file, callback) {
        var reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = function (e) {
            var data = e.target.result.split(',')[1]
            console.log("data",data)
            console.log(reader.result == data)
            var workbook = XLSX.read(data, {type: 'base64'});
            if (callback) callback(workbook);
        };

    }

    // 读取 excel文件
    function outputWorkbook(workbook) {
        var sheetNames = workbook.SheetNames; // 工作表名称集合
        sheetNames.forEach(name => {
            var worksheet = workbook.Sheets[name]; // 只能通过工作表名称来获取指定工作表
            for (var key in worksheet) {
                // v是读取单元格的原始值
                console.log(key, key[0] === '!' ? worksheet[key] : worksheet[key].v);
            }
        });
    }

    function readWorkbook(workbook) {
        var sheetNames = workbook.SheetNames; // 工作表名称集合
        var worksheet = workbook.Sheets[sheetNames[0]]; // 这里我们只读取第一张sheet
        var csv = XLSX.utils.sheet_to_csv(worksheet);
        document.getElementById('result').innerHTML = csv2table(csv);
    }

    // 将csv转换成表格
    function csv2table(csv) {
        var html = '<table>';
        var rows = csv.split('\n');
        rows.pop(); // 最后一行没用的
        rows.forEach(function (row, idx) {
            var columns = row.split(',');
            columns.unshift(idx + 1); // 添加行索引
            if (idx == 0) { // 添加列索引
                html += '<tr>';
                for (var i = 0; i < columns.length; i++) {
                    html += '<th>' + (i == 0 ? '' : String.fromCharCode(65 + i - 1)) + '</th>';
                }
                html += '</tr>';
            }
            html += '<tr>';
            columns.forEach(function (column) {
                html += '<td>' + column + '</td>';
            });
            html += '</tr>';
        });
        html += '</table>';
        return html;
    }

    function table2csv(table) {
        var csv = [];
        $(table).find('tr').each(function () {
            var temp = [];
            $(this).find('td').each(function () {
                temp.push($(this).html());
            })
            temp.shift(); // 移除第一个
            csv.push(temp.join(','));
        });
        csv.shift();
        return csv.join('\n');
    }

    // csv转sheet对象
    function csv2sheet(csv) {
        var sheet = {}; // 将要生成的sheet
        csv = csv.split('\n');
        csv.forEach(function (row, i) {
            row = row.split(',');
            if (i == 0) sheet['!ref'] = 'A1:' + String.fromCharCode(65 + row.length - 1) + (csv.length - 1);
            row.forEach(function (col, j) {
                sheet[String.fromCharCode(65 + j) + (i + 1)] = {v: col};
            });
        });
        return sheet;
    }

    // 将一个sheet转成最终的excel文件的blob对象，然后利用URL.createObjectURL下载
    function sheet2blob(sheet, sheetName) {
        sheetName = sheetName || 'sheet1';
        var workbook = {
            SheetNames: [sheetName],
            Sheets: {}
        };
        workbook.Sheets[sheetName] = sheet;
        // 生成excel的配置项
        var wopts = {
            bookType: 'xlsx', // 要生成的文件类型
            bookSST: false, // 是否生成Shared String Table，官方解释是，如果开启生成速度会下降，但在低版本IOS设备上有更好的兼容性
            type: 'binary'
        };
        var wbout = XLSX.write(workbook, wopts);
        var blob = new Blob([s2ab(wbout)], {type: "application/octet-stream"});

        // 字符串转ArrayBuffer
        function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }

        return blob;
    }
    /**
     * 通用的打开下载对话框方法，没有测试过具体兼容性
     * @param url 下载地址，也可以是一个blob对象，必选
     * @param saveName 保存文件名，可选
     */
    function openDownloadDialog(url, saveName) {
        if (typeof url == 'object' && url instanceof Blob) {
            url = URL.createObjectURL(url); // 创建blob地址
        }
        var aLink = document.createElement('a');
        aLink.href = url;
        aLink.download = saveName || ''; // HTML5新增的属性，指定保存文件名，可以不要后缀，注意，file:///模式下不会生效
        var event;
        if (window.MouseEvent) event = new MouseEvent('click');
        else {
            event = document.createEvent('MouseEvents');
            event.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
        }
        aLink.dispatchEvent(event);
    }

    $(function () {
        document.getElementById('file').addEventListener('change', function (e) {
            var files = e.target.files;
            if (files.length == 0) return;
            var f = files[0];
            if (!/\.xlsx$/g.test(f.name)) {
                alert('仅支持读取xlsx格式！');
                return;
            }
            readWorkbookFromLocalFile(f, function (workbook) {
                readWorkbook(workbook);
            });
        });
        loadRemoteFile('./sample/test.xlsx');
    });

    function loadRemoteFile(url) {
        readWorkbookFromRemoteFile(url, function (workbook) {
            readWorkbook(workbook);
        });
    }

    function exportExcel() {
        var csv = table2csv($('#result table')[0]);
        var sheet = csv2sheet(csv);
        var blob = sheet2blob(sheet);
        openDownloadDialog(blob, '导出.xlsx');
    }




</script>

</body>
</html>
